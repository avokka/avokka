{"docs":[{"location":"/paradox.json","text":"","title":""},{"location":"/index.html","text":"","title":"Avokka"},{"location":"/index.html#avokka","text":"","title":"Avokka"},{"location":"/velocypack.html","text":"","title":"avokka-velocypack"},{"location":"/velocypack.html#avokka-velocypack","text":"Velocypack encoder and decoder in pure scala\nVPackEncoder encodes scala values to VPack values T => VPack VPackDecoder decodes vpack values to scala values VPack => Either[VPackError, T]\nThe codecs package includes the scodec codecs for VPack values: VPack => Attempt[BitVector] and BitVector => Attempt[DecodeResult[VPack]]","title":"avokka-velocypack"},{"location":"/velocypack.html#installation","text":"SBT configuration :\n// avokka is published at bintray\nresolvers += Resolver.bintrayRepo(\"avokka\", \"maven\")\n\nlibraryDependencies += \"avokka\" %% \"avokka-velocypack\" % \"0.0.3\"","title":"Installation"},{"location":"/velocypack.html#usage","text":"By importing avokka.velocypack._ you bring asVPack and asVPackBits to all types T having an implicit VPackEncoder[T] :\nimport avokka.velocypack._\n\nval b: Boolean = true\n// b: Boolean = true\n\nb.toVPack\n// res0: VPack = VTrue\nb.toVPackBits.right.get\n// res1: scodec.bits.BitVector = BitVector(8 bits, 0x1a)\n\nval a: Seq[Int] = List(1,2)\n// a: Seq[Int] = List(1, 2)\n\na.toVPack\n// res2: VPack = VArray(Vector(VSmallint(1), VSmallint(2)))\na.toVPackBits.right.get\n// res3: scodec.bits.BitVector = BitVector(32 bits, 0x02043132)\nDecoding from BitVector is the opposite transformation whith an implicit VPackDecoder[T] :\nimport avokka.velocypack._\nimport scodec.bits._\n\nval bits = hex\"02043334\".bits\n// bits: BitVector = BitVector(32 bits, 0x02043334)\nbits.asVPack[Vector[Long]].right.get.value\n// res4: Vector[Long] = Vector(3, 4)","title":"Usage"},{"location":"/velocypack.html#supported-types","text":"Scala / Java avokka VPack Velocypack Boolean VBoolean true or false Long Short, Int VLong, VSmallInt signed int, unsigned int, small int Double VDouble, VLong, VSmallInt double, signed int, unsigned int, small int String VString small string, long string Instant VDate, VLong, VString utc date, int(millis), string(iso) Array[Byte], ByteVector VBinary, VString binary blob, string(hex) UUID VBinary, VString binary blob, string Option[T] VNull, VPack null, vpack Vector[T], List[T], Seq[T], Set[T], Iterable[T], Chain[T], HList VArray array Map[String, T], case classes VObject object Unit VNone empty","title":"Supported types"},{"location":"/velocypack.html#case-class-derivation","text":"With the help of magnolia, we can instantiate codecs for case classes as velocypack objects (VPackDecoder.gen), or arrays (VPackGeneric) :\nimport avokka.velocypack._\nimport scodec.bits._\n\ncase class Test(b: Boolean)\nimplicit val testEncoder: VPackEncoder[Test] = VPackEncoder.gen\n// testEncoder: VPackEncoder[Test] = avokka.velocypack.VPackEncoder$$anon$2@80c0cb2\nimplicit val testDecoder: VPackDecoder[Test] = VPackDecoder.gen\n// testDecoder: VPackDecoder[Test] = avokka.velocypack.VPackDecoder$$anon$1@1d7ae0a6\n\nval t = Test(true)\n// t: Test = Test(true)\n\nt.toVPack.toString      \n// res5: String = VObject(Map(b -> VTrue))      \nt.toVPackBits.right.get\n// res6: BitVector = BitVector(56 bits, 0x0b070141621a03)\n\nhex\"0b070141621903\".bits.asVPack[Test].right.get.value\n// res7: Test = Test(false)\nhex\"0a\".bits.asVPack[Test].left.get                                                                                         \n// res8: VPackError = avokka.velocypack.VPackError$ObjectFieldAbsent: object field absent b                                                                                         \n\ncase class TestTrue(b: Boolean = true)                \n\nimplicit val testTrueDecoder: VPackDecoder[TestTrue] = VPackDecoder.gen\n// testTrueDecoder: VPackDecoder[TestTrue] = avokka.velocypack.VPackDecoder$$anon$1@1994fae1\n\nhex\"0b070141621903\".bits.asVPack[TestTrue].right.get.value             \n// res9: TestTrue = TestTrue(false)             \nhex\"0a\".bits.asVPack[TestTrue].right.get.value                                                                                                         \n// res10: TestTrue = TestTrue(true)","title":"Case class derivation"}]}